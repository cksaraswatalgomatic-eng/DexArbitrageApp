
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model balance_timeseries
 * 
 */
export type balance_timeseries = $Result.DefaultSelection<Prisma.$balance_timeseriesPayload>
/**
 * Model portfolio_timeseries
 * 
 */
export type portfolio_timeseries = $Result.DefaultSelection<Prisma.$portfolio_timeseriesPayload>
/**
 * Model trades
 * 
 */
export type trades = $Result.DefaultSelection<Prisma.$tradesPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Balance_timeseries
 * const balance_timeseries = await prisma.balance_timeseries.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Balance_timeseries
   * const balance_timeseries = await prisma.balance_timeseries.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.balance_timeseries`: Exposes CRUD operations for the **balance_timeseries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Balance_timeseries
    * const balance_timeseries = await prisma.balance_timeseries.findMany()
    * ```
    */
  get balance_timeseries(): Prisma.balance_timeseriesDelegate<ExtArgs>;

  /**
   * `prisma.portfolio_timeseries`: Exposes CRUD operations for the **portfolio_timeseries** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Portfolio_timeseries
    * const portfolio_timeseries = await prisma.portfolio_timeseries.findMany()
    * ```
    */
  get portfolio_timeseries(): Prisma.portfolio_timeseriesDelegate<ExtArgs>;

  /**
   * `prisma.trades`: Exposes CRUD operations for the **trades** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trades
    * const trades = await prisma.trades.findMany()
    * ```
    */
  get trades(): Prisma.tradesDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    balance_timeseries: 'balance_timeseries',
    portfolio_timeseries: 'portfolio_timeseries',
    trades: 'trades'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "balance_timeseries" | "portfolio_timeseries" | "trades"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      balance_timeseries: {
        payload: Prisma.$balance_timeseriesPayload<ExtArgs>
        fields: Prisma.balance_timeseriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.balance_timeseriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.balance_timeseriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          findFirst: {
            args: Prisma.balance_timeseriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.balance_timeseriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          findMany: {
            args: Prisma.balance_timeseriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>[]
          }
          create: {
            args: Prisma.balance_timeseriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          createMany: {
            args: Prisma.balance_timeseriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.balance_timeseriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>[]
          }
          delete: {
            args: Prisma.balance_timeseriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          update: {
            args: Prisma.balance_timeseriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          deleteMany: {
            args: Prisma.balance_timeseriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.balance_timeseriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.balance_timeseriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$balance_timeseriesPayload>
          }
          aggregate: {
            args: Prisma.Balance_timeseriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBalance_timeseries>
          }
          groupBy: {
            args: Prisma.balance_timeseriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Balance_timeseriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.balance_timeseriesCountArgs<ExtArgs>
            result: $Utils.Optional<Balance_timeseriesCountAggregateOutputType> | number
          }
        }
      }
      portfolio_timeseries: {
        payload: Prisma.$portfolio_timeseriesPayload<ExtArgs>
        fields: Prisma.portfolio_timeseriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.portfolio_timeseriesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.portfolio_timeseriesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          findFirst: {
            args: Prisma.portfolio_timeseriesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.portfolio_timeseriesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          findMany: {
            args: Prisma.portfolio_timeseriesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>[]
          }
          create: {
            args: Prisma.portfolio_timeseriesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          createMany: {
            args: Prisma.portfolio_timeseriesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.portfolio_timeseriesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>[]
          }
          delete: {
            args: Prisma.portfolio_timeseriesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          update: {
            args: Prisma.portfolio_timeseriesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          deleteMany: {
            args: Prisma.portfolio_timeseriesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.portfolio_timeseriesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.portfolio_timeseriesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$portfolio_timeseriesPayload>
          }
          aggregate: {
            args: Prisma.Portfolio_timeseriesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePortfolio_timeseries>
          }
          groupBy: {
            args: Prisma.portfolio_timeseriesGroupByArgs<ExtArgs>
            result: $Utils.Optional<Portfolio_timeseriesGroupByOutputType>[]
          }
          count: {
            args: Prisma.portfolio_timeseriesCountArgs<ExtArgs>
            result: $Utils.Optional<Portfolio_timeseriesCountAggregateOutputType> | number
          }
        }
      }
      trades: {
        payload: Prisma.$tradesPayload<ExtArgs>
        fields: Prisma.tradesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.tradesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.tradesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          findFirst: {
            args: Prisma.tradesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.tradesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          findMany: {
            args: Prisma.tradesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>[]
          }
          create: {
            args: Prisma.tradesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          createMany: {
            args: Prisma.tradesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.tradesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>[]
          }
          delete: {
            args: Prisma.tradesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          update: {
            args: Prisma.tradesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          deleteMany: {
            args: Prisma.tradesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.tradesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.tradesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$tradesPayload>
          }
          aggregate: {
            args: Prisma.TradesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrades>
          }
          groupBy: {
            args: Prisma.tradesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TradesGroupByOutputType>[]
          }
          count: {
            args: Prisma.tradesCountArgs<ExtArgs>
            result: $Utils.Optional<TradesCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model balance_timeseries
   */

  export type AggregateBalance_timeseries = {
    _count: Balance_timeseriesCountAggregateOutputType | null
    _avg: Balance_timeseriesAvgAggregateOutputType | null
    _sum: Balance_timeseriesSumAggregateOutputType | null
    _min: Balance_timeseriesMinAggregateOutputType | null
    _max: Balance_timeseriesMaxAggregateOutputType | null
  }

  export type Balance_timeseriesAvgAggregateOutputType = {
    id: number | null
    ts: number | null
    usdt_val: number | null
    coin_val: number | null
    total_usd: number | null
  }

  export type Balance_timeseriesSumAggregateOutputType = {
    id: number | null
    ts: number | null
    usdt_val: number | null
    coin_val: number | null
    total_usd: number | null
  }

  export type Balance_timeseriesMinAggregateOutputType = {
    id: number | null
    ts: number | null
    exchange: string | null
    usdt_val: number | null
    coin_val: number | null
    total_usd: number | null
    raw_json: string | null
  }

  export type Balance_timeseriesMaxAggregateOutputType = {
    id: number | null
    ts: number | null
    exchange: string | null
    usdt_val: number | null
    coin_val: number | null
    total_usd: number | null
    raw_json: string | null
  }

  export type Balance_timeseriesCountAggregateOutputType = {
    id: number
    ts: number
    exchange: number
    usdt_val: number
    coin_val: number
    total_usd: number
    raw_json: number
    _all: number
  }


  export type Balance_timeseriesAvgAggregateInputType = {
    id?: true
    ts?: true
    usdt_val?: true
    coin_val?: true
    total_usd?: true
  }

  export type Balance_timeseriesSumAggregateInputType = {
    id?: true
    ts?: true
    usdt_val?: true
    coin_val?: true
    total_usd?: true
  }

  export type Balance_timeseriesMinAggregateInputType = {
    id?: true
    ts?: true
    exchange?: true
    usdt_val?: true
    coin_val?: true
    total_usd?: true
    raw_json?: true
  }

  export type Balance_timeseriesMaxAggregateInputType = {
    id?: true
    ts?: true
    exchange?: true
    usdt_val?: true
    coin_val?: true
    total_usd?: true
    raw_json?: true
  }

  export type Balance_timeseriesCountAggregateInputType = {
    id?: true
    ts?: true
    exchange?: true
    usdt_val?: true
    coin_val?: true
    total_usd?: true
    raw_json?: true
    _all?: true
  }

  export type Balance_timeseriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which balance_timeseries to aggregate.
     */
    where?: balance_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_timeseries to fetch.
     */
    orderBy?: balance_timeseriesOrderByWithRelationInput | balance_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: balance_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned balance_timeseries
    **/
    _count?: true | Balance_timeseriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Balance_timeseriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Balance_timeseriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Balance_timeseriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Balance_timeseriesMaxAggregateInputType
  }

  export type GetBalance_timeseriesAggregateType<T extends Balance_timeseriesAggregateArgs> = {
        [P in keyof T & keyof AggregateBalance_timeseries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBalance_timeseries[P]>
      : GetScalarType<T[P], AggregateBalance_timeseries[P]>
  }




  export type balance_timeseriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: balance_timeseriesWhereInput
    orderBy?: balance_timeseriesOrderByWithAggregationInput | balance_timeseriesOrderByWithAggregationInput[]
    by: Balance_timeseriesScalarFieldEnum[] | Balance_timeseriesScalarFieldEnum
    having?: balance_timeseriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Balance_timeseriesCountAggregateInputType | true
    _avg?: Balance_timeseriesAvgAggregateInputType
    _sum?: Balance_timeseriesSumAggregateInputType
    _min?: Balance_timeseriesMinAggregateInputType
    _max?: Balance_timeseriesMaxAggregateInputType
  }

  export type Balance_timeseriesGroupByOutputType = {
    id: number
    ts: number
    exchange: string
    usdt_val: number
    coin_val: number
    total_usd: number
    raw_json: string
    _count: Balance_timeseriesCountAggregateOutputType | null
    _avg: Balance_timeseriesAvgAggregateOutputType | null
    _sum: Balance_timeseriesSumAggregateOutputType | null
    _min: Balance_timeseriesMinAggregateOutputType | null
    _max: Balance_timeseriesMaxAggregateOutputType | null
  }

  type GetBalance_timeseriesGroupByPayload<T extends balance_timeseriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Balance_timeseriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Balance_timeseriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Balance_timeseriesGroupByOutputType[P]>
            : GetScalarType<T[P], Balance_timeseriesGroupByOutputType[P]>
        }
      >
    >


  export type balance_timeseriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    exchange?: boolean
    usdt_val?: boolean
    coin_val?: boolean
    total_usd?: boolean
    raw_json?: boolean
  }, ExtArgs["result"]["balance_timeseries"]>

  export type balance_timeseriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    exchange?: boolean
    usdt_val?: boolean
    coin_val?: boolean
    total_usd?: boolean
    raw_json?: boolean
  }, ExtArgs["result"]["balance_timeseries"]>

  export type balance_timeseriesSelectScalar = {
    id?: boolean
    ts?: boolean
    exchange?: boolean
    usdt_val?: boolean
    coin_val?: boolean
    total_usd?: boolean
    raw_json?: boolean
  }


  export type $balance_timeseriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "balance_timeseries"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ts: number
      exchange: string
      usdt_val: number
      coin_val: number
      total_usd: number
      raw_json: string
    }, ExtArgs["result"]["balance_timeseries"]>
    composites: {}
  }

  type balance_timeseriesGetPayload<S extends boolean | null | undefined | balance_timeseriesDefaultArgs> = $Result.GetResult<Prisma.$balance_timeseriesPayload, S>

  type balance_timeseriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<balance_timeseriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Balance_timeseriesCountAggregateInputType | true
    }

  export interface balance_timeseriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['balance_timeseries'], meta: { name: 'balance_timeseries' } }
    /**
     * Find zero or one Balance_timeseries that matches the filter.
     * @param {balance_timeseriesFindUniqueArgs} args - Arguments to find a Balance_timeseries
     * @example
     * // Get one Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends balance_timeseriesFindUniqueArgs>(args: SelectSubset<T, balance_timeseriesFindUniqueArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Balance_timeseries that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {balance_timeseriesFindUniqueOrThrowArgs} args - Arguments to find a Balance_timeseries
     * @example
     * // Get one Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends balance_timeseriesFindUniqueOrThrowArgs>(args: SelectSubset<T, balance_timeseriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Balance_timeseries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesFindFirstArgs} args - Arguments to find a Balance_timeseries
     * @example
     * // Get one Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends balance_timeseriesFindFirstArgs>(args?: SelectSubset<T, balance_timeseriesFindFirstArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Balance_timeseries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesFindFirstOrThrowArgs} args - Arguments to find a Balance_timeseries
     * @example
     * // Get one Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends balance_timeseriesFindFirstOrThrowArgs>(args?: SelectSubset<T, balance_timeseriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Balance_timeseries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findMany()
     * 
     * // Get first 10 Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const balance_timeseriesWithIdOnly = await prisma.balance_timeseries.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends balance_timeseriesFindManyArgs>(args?: SelectSubset<T, balance_timeseriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Balance_timeseries.
     * @param {balance_timeseriesCreateArgs} args - Arguments to create a Balance_timeseries.
     * @example
     * // Create one Balance_timeseries
     * const Balance_timeseries = await prisma.balance_timeseries.create({
     *   data: {
     *     // ... data to create a Balance_timeseries
     *   }
     * })
     * 
     */
    create<T extends balance_timeseriesCreateArgs>(args: SelectSubset<T, balance_timeseriesCreateArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Balance_timeseries.
     * @param {balance_timeseriesCreateManyArgs} args - Arguments to create many Balance_timeseries.
     * @example
     * // Create many Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends balance_timeseriesCreateManyArgs>(args?: SelectSubset<T, balance_timeseriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Balance_timeseries and returns the data saved in the database.
     * @param {balance_timeseriesCreateManyAndReturnArgs} args - Arguments to create many Balance_timeseries.
     * @example
     * // Create many Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Balance_timeseries and only return the `id`
     * const balance_timeseriesWithIdOnly = await prisma.balance_timeseries.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends balance_timeseriesCreateManyAndReturnArgs>(args?: SelectSubset<T, balance_timeseriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Balance_timeseries.
     * @param {balance_timeseriesDeleteArgs} args - Arguments to delete one Balance_timeseries.
     * @example
     * // Delete one Balance_timeseries
     * const Balance_timeseries = await prisma.balance_timeseries.delete({
     *   where: {
     *     // ... filter to delete one Balance_timeseries
     *   }
     * })
     * 
     */
    delete<T extends balance_timeseriesDeleteArgs>(args: SelectSubset<T, balance_timeseriesDeleteArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Balance_timeseries.
     * @param {balance_timeseriesUpdateArgs} args - Arguments to update one Balance_timeseries.
     * @example
     * // Update one Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends balance_timeseriesUpdateArgs>(args: SelectSubset<T, balance_timeseriesUpdateArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Balance_timeseries.
     * @param {balance_timeseriesDeleteManyArgs} args - Arguments to filter Balance_timeseries to delete.
     * @example
     * // Delete a few Balance_timeseries
     * const { count } = await prisma.balance_timeseries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends balance_timeseriesDeleteManyArgs>(args?: SelectSubset<T, balance_timeseriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Balance_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends balance_timeseriesUpdateManyArgs>(args: SelectSubset<T, balance_timeseriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Balance_timeseries.
     * @param {balance_timeseriesUpsertArgs} args - Arguments to update or create a Balance_timeseries.
     * @example
     * // Update or create a Balance_timeseries
     * const balance_timeseries = await prisma.balance_timeseries.upsert({
     *   create: {
     *     // ... data to create a Balance_timeseries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Balance_timeseries we want to update
     *   }
     * })
     */
    upsert<T extends balance_timeseriesUpsertArgs>(args: SelectSubset<T, balance_timeseriesUpsertArgs<ExtArgs>>): Prisma__balance_timeseriesClient<$Result.GetResult<Prisma.$balance_timeseriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Balance_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesCountArgs} args - Arguments to filter Balance_timeseries to count.
     * @example
     * // Count the number of Balance_timeseries
     * const count = await prisma.balance_timeseries.count({
     *   where: {
     *     // ... the filter for the Balance_timeseries we want to count
     *   }
     * })
    **/
    count<T extends balance_timeseriesCountArgs>(
      args?: Subset<T, balance_timeseriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Balance_timeseriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Balance_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Balance_timeseriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Balance_timeseriesAggregateArgs>(args: Subset<T, Balance_timeseriesAggregateArgs>): Prisma.PrismaPromise<GetBalance_timeseriesAggregateType<T>>

    /**
     * Group by Balance_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {balance_timeseriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends balance_timeseriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: balance_timeseriesGroupByArgs['orderBy'] }
        : { orderBy?: balance_timeseriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, balance_timeseriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBalance_timeseriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the balance_timeseries model
   */
  readonly fields: balance_timeseriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for balance_timeseries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__balance_timeseriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the balance_timeseries model
   */ 
  interface balance_timeseriesFieldRefs {
    readonly id: FieldRef<"balance_timeseries", 'Int'>
    readonly ts: FieldRef<"balance_timeseries", 'Int'>
    readonly exchange: FieldRef<"balance_timeseries", 'String'>
    readonly usdt_val: FieldRef<"balance_timeseries", 'Float'>
    readonly coin_val: FieldRef<"balance_timeseries", 'Float'>
    readonly total_usd: FieldRef<"balance_timeseries", 'Float'>
    readonly raw_json: FieldRef<"balance_timeseries", 'String'>
  }
    

  // Custom InputTypes
  /**
   * balance_timeseries findUnique
   */
  export type balance_timeseriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which balance_timeseries to fetch.
     */
    where: balance_timeseriesWhereUniqueInput
  }

  /**
   * balance_timeseries findUniqueOrThrow
   */
  export type balance_timeseriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which balance_timeseries to fetch.
     */
    where: balance_timeseriesWhereUniqueInput
  }

  /**
   * balance_timeseries findFirst
   */
  export type balance_timeseriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which balance_timeseries to fetch.
     */
    where?: balance_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_timeseries to fetch.
     */
    orderBy?: balance_timeseriesOrderByWithRelationInput | balance_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for balance_timeseries.
     */
    cursor?: balance_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of balance_timeseries.
     */
    distinct?: Balance_timeseriesScalarFieldEnum | Balance_timeseriesScalarFieldEnum[]
  }

  /**
   * balance_timeseries findFirstOrThrow
   */
  export type balance_timeseriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which balance_timeseries to fetch.
     */
    where?: balance_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_timeseries to fetch.
     */
    orderBy?: balance_timeseriesOrderByWithRelationInput | balance_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for balance_timeseries.
     */
    cursor?: balance_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of balance_timeseries.
     */
    distinct?: Balance_timeseriesScalarFieldEnum | Balance_timeseriesScalarFieldEnum[]
  }

  /**
   * balance_timeseries findMany
   */
  export type balance_timeseriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which balance_timeseries to fetch.
     */
    where?: balance_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of balance_timeseries to fetch.
     */
    orderBy?: balance_timeseriesOrderByWithRelationInput | balance_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing balance_timeseries.
     */
    cursor?: balance_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` balance_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` balance_timeseries.
     */
    skip?: number
    distinct?: Balance_timeseriesScalarFieldEnum | Balance_timeseriesScalarFieldEnum[]
  }

  /**
   * balance_timeseries create
   */
  export type balance_timeseriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * The data needed to create a balance_timeseries.
     */
    data: XOR<balance_timeseriesCreateInput, balance_timeseriesUncheckedCreateInput>
  }

  /**
   * balance_timeseries createMany
   */
  export type balance_timeseriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many balance_timeseries.
     */
    data: balance_timeseriesCreateManyInput | balance_timeseriesCreateManyInput[]
  }

  /**
   * balance_timeseries createManyAndReturn
   */
  export type balance_timeseriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many balance_timeseries.
     */
    data: balance_timeseriesCreateManyInput | balance_timeseriesCreateManyInput[]
  }

  /**
   * balance_timeseries update
   */
  export type balance_timeseriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * The data needed to update a balance_timeseries.
     */
    data: XOR<balance_timeseriesUpdateInput, balance_timeseriesUncheckedUpdateInput>
    /**
     * Choose, which balance_timeseries to update.
     */
    where: balance_timeseriesWhereUniqueInput
  }

  /**
   * balance_timeseries updateMany
   */
  export type balance_timeseriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update balance_timeseries.
     */
    data: XOR<balance_timeseriesUpdateManyMutationInput, balance_timeseriesUncheckedUpdateManyInput>
    /**
     * Filter which balance_timeseries to update
     */
    where?: balance_timeseriesWhereInput
  }

  /**
   * balance_timeseries upsert
   */
  export type balance_timeseriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * The filter to search for the balance_timeseries to update in case it exists.
     */
    where: balance_timeseriesWhereUniqueInput
    /**
     * In case the balance_timeseries found by the `where` argument doesn't exist, create a new balance_timeseries with this data.
     */
    create: XOR<balance_timeseriesCreateInput, balance_timeseriesUncheckedCreateInput>
    /**
     * In case the balance_timeseries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<balance_timeseriesUpdateInput, balance_timeseriesUncheckedUpdateInput>
  }

  /**
   * balance_timeseries delete
   */
  export type balance_timeseriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
    /**
     * Filter which balance_timeseries to delete.
     */
    where: balance_timeseriesWhereUniqueInput
  }

  /**
   * balance_timeseries deleteMany
   */
  export type balance_timeseriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which balance_timeseries to delete
     */
    where?: balance_timeseriesWhereInput
  }

  /**
   * balance_timeseries without action
   */
  export type balance_timeseriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the balance_timeseries
     */
    select?: balance_timeseriesSelect<ExtArgs> | null
  }


  /**
   * Model portfolio_timeseries
   */

  export type AggregatePortfolio_timeseries = {
    _count: Portfolio_timeseriesCountAggregateOutputType | null
    _avg: Portfolio_timeseriesAvgAggregateOutputType | null
    _sum: Portfolio_timeseriesSumAggregateOutputType | null
    _min: Portfolio_timeseriesMinAggregateOutputType | null
    _max: Portfolio_timeseriesMaxAggregateOutputType | null
  }

  export type Portfolio_timeseriesAvgAggregateOutputType = {
    id: number | null
    ts: number | null
    total_usd: number | null
    exchanges_count: number | null
  }

  export type Portfolio_timeseriesSumAggregateOutputType = {
    id: number | null
    ts: number | null
    total_usd: number | null
    exchanges_count: number | null
  }

  export type Portfolio_timeseriesMinAggregateOutputType = {
    id: number | null
    ts: number | null
    total_usd: number | null
    exchanges_count: number | null
  }

  export type Portfolio_timeseriesMaxAggregateOutputType = {
    id: number | null
    ts: number | null
    total_usd: number | null
    exchanges_count: number | null
  }

  export type Portfolio_timeseriesCountAggregateOutputType = {
    id: number
    ts: number
    total_usd: number
    exchanges_count: number
    _all: number
  }


  export type Portfolio_timeseriesAvgAggregateInputType = {
    id?: true
    ts?: true
    total_usd?: true
    exchanges_count?: true
  }

  export type Portfolio_timeseriesSumAggregateInputType = {
    id?: true
    ts?: true
    total_usd?: true
    exchanges_count?: true
  }

  export type Portfolio_timeseriesMinAggregateInputType = {
    id?: true
    ts?: true
    total_usd?: true
    exchanges_count?: true
  }

  export type Portfolio_timeseriesMaxAggregateInputType = {
    id?: true
    ts?: true
    total_usd?: true
    exchanges_count?: true
  }

  export type Portfolio_timeseriesCountAggregateInputType = {
    id?: true
    ts?: true
    total_usd?: true
    exchanges_count?: true
    _all?: true
  }

  export type Portfolio_timeseriesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which portfolio_timeseries to aggregate.
     */
    where?: portfolio_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of portfolio_timeseries to fetch.
     */
    orderBy?: portfolio_timeseriesOrderByWithRelationInput | portfolio_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: portfolio_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` portfolio_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` portfolio_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned portfolio_timeseries
    **/
    _count?: true | Portfolio_timeseriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Portfolio_timeseriesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Portfolio_timeseriesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Portfolio_timeseriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Portfolio_timeseriesMaxAggregateInputType
  }

  export type GetPortfolio_timeseriesAggregateType<T extends Portfolio_timeseriesAggregateArgs> = {
        [P in keyof T & keyof AggregatePortfolio_timeseries]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePortfolio_timeseries[P]>
      : GetScalarType<T[P], AggregatePortfolio_timeseries[P]>
  }




  export type portfolio_timeseriesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: portfolio_timeseriesWhereInput
    orderBy?: portfolio_timeseriesOrderByWithAggregationInput | portfolio_timeseriesOrderByWithAggregationInput[]
    by: Portfolio_timeseriesScalarFieldEnum[] | Portfolio_timeseriesScalarFieldEnum
    having?: portfolio_timeseriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Portfolio_timeseriesCountAggregateInputType | true
    _avg?: Portfolio_timeseriesAvgAggregateInputType
    _sum?: Portfolio_timeseriesSumAggregateInputType
    _min?: Portfolio_timeseriesMinAggregateInputType
    _max?: Portfolio_timeseriesMaxAggregateInputType
  }

  export type Portfolio_timeseriesGroupByOutputType = {
    id: number
    ts: number
    total_usd: number
    exchanges_count: number
    _count: Portfolio_timeseriesCountAggregateOutputType | null
    _avg: Portfolio_timeseriesAvgAggregateOutputType | null
    _sum: Portfolio_timeseriesSumAggregateOutputType | null
    _min: Portfolio_timeseriesMinAggregateOutputType | null
    _max: Portfolio_timeseriesMaxAggregateOutputType | null
  }

  type GetPortfolio_timeseriesGroupByPayload<T extends portfolio_timeseriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Portfolio_timeseriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Portfolio_timeseriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Portfolio_timeseriesGroupByOutputType[P]>
            : GetScalarType<T[P], Portfolio_timeseriesGroupByOutputType[P]>
        }
      >
    >


  export type portfolio_timeseriesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    total_usd?: boolean
    exchanges_count?: boolean
  }, ExtArgs["result"]["portfolio_timeseries"]>

  export type portfolio_timeseriesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    ts?: boolean
    total_usd?: boolean
    exchanges_count?: boolean
  }, ExtArgs["result"]["portfolio_timeseries"]>

  export type portfolio_timeseriesSelectScalar = {
    id?: boolean
    ts?: boolean
    total_usd?: boolean
    exchanges_count?: boolean
  }


  export type $portfolio_timeseriesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "portfolio_timeseries"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      ts: number
      total_usd: number
      exchanges_count: number
    }, ExtArgs["result"]["portfolio_timeseries"]>
    composites: {}
  }

  type portfolio_timeseriesGetPayload<S extends boolean | null | undefined | portfolio_timeseriesDefaultArgs> = $Result.GetResult<Prisma.$portfolio_timeseriesPayload, S>

  type portfolio_timeseriesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<portfolio_timeseriesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Portfolio_timeseriesCountAggregateInputType | true
    }

  export interface portfolio_timeseriesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['portfolio_timeseries'], meta: { name: 'portfolio_timeseries' } }
    /**
     * Find zero or one Portfolio_timeseries that matches the filter.
     * @param {portfolio_timeseriesFindUniqueArgs} args - Arguments to find a Portfolio_timeseries
     * @example
     * // Get one Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends portfolio_timeseriesFindUniqueArgs>(args: SelectSubset<T, portfolio_timeseriesFindUniqueArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Portfolio_timeseries that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {portfolio_timeseriesFindUniqueOrThrowArgs} args - Arguments to find a Portfolio_timeseries
     * @example
     * // Get one Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends portfolio_timeseriesFindUniqueOrThrowArgs>(args: SelectSubset<T, portfolio_timeseriesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Portfolio_timeseries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesFindFirstArgs} args - Arguments to find a Portfolio_timeseries
     * @example
     * // Get one Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends portfolio_timeseriesFindFirstArgs>(args?: SelectSubset<T, portfolio_timeseriesFindFirstArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Portfolio_timeseries that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesFindFirstOrThrowArgs} args - Arguments to find a Portfolio_timeseries
     * @example
     * // Get one Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends portfolio_timeseriesFindFirstOrThrowArgs>(args?: SelectSubset<T, portfolio_timeseriesFindFirstOrThrowArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Portfolio_timeseries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findMany()
     * 
     * // Get first 10 Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const portfolio_timeseriesWithIdOnly = await prisma.portfolio_timeseries.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends portfolio_timeseriesFindManyArgs>(args?: SelectSubset<T, portfolio_timeseriesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Portfolio_timeseries.
     * @param {portfolio_timeseriesCreateArgs} args - Arguments to create a Portfolio_timeseries.
     * @example
     * // Create one Portfolio_timeseries
     * const Portfolio_timeseries = await prisma.portfolio_timeseries.create({
     *   data: {
     *     // ... data to create a Portfolio_timeseries
     *   }
     * })
     * 
     */
    create<T extends portfolio_timeseriesCreateArgs>(args: SelectSubset<T, portfolio_timeseriesCreateArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Portfolio_timeseries.
     * @param {portfolio_timeseriesCreateManyArgs} args - Arguments to create many Portfolio_timeseries.
     * @example
     * // Create many Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends portfolio_timeseriesCreateManyArgs>(args?: SelectSubset<T, portfolio_timeseriesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Portfolio_timeseries and returns the data saved in the database.
     * @param {portfolio_timeseriesCreateManyAndReturnArgs} args - Arguments to create many Portfolio_timeseries.
     * @example
     * // Create many Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Portfolio_timeseries and only return the `id`
     * const portfolio_timeseriesWithIdOnly = await prisma.portfolio_timeseries.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends portfolio_timeseriesCreateManyAndReturnArgs>(args?: SelectSubset<T, portfolio_timeseriesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Portfolio_timeseries.
     * @param {portfolio_timeseriesDeleteArgs} args - Arguments to delete one Portfolio_timeseries.
     * @example
     * // Delete one Portfolio_timeseries
     * const Portfolio_timeseries = await prisma.portfolio_timeseries.delete({
     *   where: {
     *     // ... filter to delete one Portfolio_timeseries
     *   }
     * })
     * 
     */
    delete<T extends portfolio_timeseriesDeleteArgs>(args: SelectSubset<T, portfolio_timeseriesDeleteArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Portfolio_timeseries.
     * @param {portfolio_timeseriesUpdateArgs} args - Arguments to update one Portfolio_timeseries.
     * @example
     * // Update one Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends portfolio_timeseriesUpdateArgs>(args: SelectSubset<T, portfolio_timeseriesUpdateArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Portfolio_timeseries.
     * @param {portfolio_timeseriesDeleteManyArgs} args - Arguments to filter Portfolio_timeseries to delete.
     * @example
     * // Delete a few Portfolio_timeseries
     * const { count } = await prisma.portfolio_timeseries.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends portfolio_timeseriesDeleteManyArgs>(args?: SelectSubset<T, portfolio_timeseriesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Portfolio_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends portfolio_timeseriesUpdateManyArgs>(args: SelectSubset<T, portfolio_timeseriesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Portfolio_timeseries.
     * @param {portfolio_timeseriesUpsertArgs} args - Arguments to update or create a Portfolio_timeseries.
     * @example
     * // Update or create a Portfolio_timeseries
     * const portfolio_timeseries = await prisma.portfolio_timeseries.upsert({
     *   create: {
     *     // ... data to create a Portfolio_timeseries
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Portfolio_timeseries we want to update
     *   }
     * })
     */
    upsert<T extends portfolio_timeseriesUpsertArgs>(args: SelectSubset<T, portfolio_timeseriesUpsertArgs<ExtArgs>>): Prisma__portfolio_timeseriesClient<$Result.GetResult<Prisma.$portfolio_timeseriesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Portfolio_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesCountArgs} args - Arguments to filter Portfolio_timeseries to count.
     * @example
     * // Count the number of Portfolio_timeseries
     * const count = await prisma.portfolio_timeseries.count({
     *   where: {
     *     // ... the filter for the Portfolio_timeseries we want to count
     *   }
     * })
    **/
    count<T extends portfolio_timeseriesCountArgs>(
      args?: Subset<T, portfolio_timeseriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Portfolio_timeseriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Portfolio_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Portfolio_timeseriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Portfolio_timeseriesAggregateArgs>(args: Subset<T, Portfolio_timeseriesAggregateArgs>): Prisma.PrismaPromise<GetPortfolio_timeseriesAggregateType<T>>

    /**
     * Group by Portfolio_timeseries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {portfolio_timeseriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends portfolio_timeseriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: portfolio_timeseriesGroupByArgs['orderBy'] }
        : { orderBy?: portfolio_timeseriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, portfolio_timeseriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPortfolio_timeseriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the portfolio_timeseries model
   */
  readonly fields: portfolio_timeseriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for portfolio_timeseries.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__portfolio_timeseriesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the portfolio_timeseries model
   */ 
  interface portfolio_timeseriesFieldRefs {
    readonly id: FieldRef<"portfolio_timeseries", 'Int'>
    readonly ts: FieldRef<"portfolio_timeseries", 'Int'>
    readonly total_usd: FieldRef<"portfolio_timeseries", 'Float'>
    readonly exchanges_count: FieldRef<"portfolio_timeseries", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * portfolio_timeseries findUnique
   */
  export type portfolio_timeseriesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which portfolio_timeseries to fetch.
     */
    where: portfolio_timeseriesWhereUniqueInput
  }

  /**
   * portfolio_timeseries findUniqueOrThrow
   */
  export type portfolio_timeseriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which portfolio_timeseries to fetch.
     */
    where: portfolio_timeseriesWhereUniqueInput
  }

  /**
   * portfolio_timeseries findFirst
   */
  export type portfolio_timeseriesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which portfolio_timeseries to fetch.
     */
    where?: portfolio_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of portfolio_timeseries to fetch.
     */
    orderBy?: portfolio_timeseriesOrderByWithRelationInput | portfolio_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for portfolio_timeseries.
     */
    cursor?: portfolio_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` portfolio_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` portfolio_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of portfolio_timeseries.
     */
    distinct?: Portfolio_timeseriesScalarFieldEnum | Portfolio_timeseriesScalarFieldEnum[]
  }

  /**
   * portfolio_timeseries findFirstOrThrow
   */
  export type portfolio_timeseriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which portfolio_timeseries to fetch.
     */
    where?: portfolio_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of portfolio_timeseries to fetch.
     */
    orderBy?: portfolio_timeseriesOrderByWithRelationInput | portfolio_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for portfolio_timeseries.
     */
    cursor?: portfolio_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` portfolio_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` portfolio_timeseries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of portfolio_timeseries.
     */
    distinct?: Portfolio_timeseriesScalarFieldEnum | Portfolio_timeseriesScalarFieldEnum[]
  }

  /**
   * portfolio_timeseries findMany
   */
  export type portfolio_timeseriesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter, which portfolio_timeseries to fetch.
     */
    where?: portfolio_timeseriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of portfolio_timeseries to fetch.
     */
    orderBy?: portfolio_timeseriesOrderByWithRelationInput | portfolio_timeseriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing portfolio_timeseries.
     */
    cursor?: portfolio_timeseriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` portfolio_timeseries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` portfolio_timeseries.
     */
    skip?: number
    distinct?: Portfolio_timeseriesScalarFieldEnum | Portfolio_timeseriesScalarFieldEnum[]
  }

  /**
   * portfolio_timeseries create
   */
  export type portfolio_timeseriesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * The data needed to create a portfolio_timeseries.
     */
    data: XOR<portfolio_timeseriesCreateInput, portfolio_timeseriesUncheckedCreateInput>
  }

  /**
   * portfolio_timeseries createMany
   */
  export type portfolio_timeseriesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many portfolio_timeseries.
     */
    data: portfolio_timeseriesCreateManyInput | portfolio_timeseriesCreateManyInput[]
  }

  /**
   * portfolio_timeseries createManyAndReturn
   */
  export type portfolio_timeseriesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many portfolio_timeseries.
     */
    data: portfolio_timeseriesCreateManyInput | portfolio_timeseriesCreateManyInput[]
  }

  /**
   * portfolio_timeseries update
   */
  export type portfolio_timeseriesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * The data needed to update a portfolio_timeseries.
     */
    data: XOR<portfolio_timeseriesUpdateInput, portfolio_timeseriesUncheckedUpdateInput>
    /**
     * Choose, which portfolio_timeseries to update.
     */
    where: portfolio_timeseriesWhereUniqueInput
  }

  /**
   * portfolio_timeseries updateMany
   */
  export type portfolio_timeseriesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update portfolio_timeseries.
     */
    data: XOR<portfolio_timeseriesUpdateManyMutationInput, portfolio_timeseriesUncheckedUpdateManyInput>
    /**
     * Filter which portfolio_timeseries to update
     */
    where?: portfolio_timeseriesWhereInput
  }

  /**
   * portfolio_timeseries upsert
   */
  export type portfolio_timeseriesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * The filter to search for the portfolio_timeseries to update in case it exists.
     */
    where: portfolio_timeseriesWhereUniqueInput
    /**
     * In case the portfolio_timeseries found by the `where` argument doesn't exist, create a new portfolio_timeseries with this data.
     */
    create: XOR<portfolio_timeseriesCreateInput, portfolio_timeseriesUncheckedCreateInput>
    /**
     * In case the portfolio_timeseries was found with the provided `where` argument, update it with this data.
     */
    update: XOR<portfolio_timeseriesUpdateInput, portfolio_timeseriesUncheckedUpdateInput>
  }

  /**
   * portfolio_timeseries delete
   */
  export type portfolio_timeseriesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
    /**
     * Filter which portfolio_timeseries to delete.
     */
    where: portfolio_timeseriesWhereUniqueInput
  }

  /**
   * portfolio_timeseries deleteMany
   */
  export type portfolio_timeseriesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which portfolio_timeseries to delete
     */
    where?: portfolio_timeseriesWhereInput
  }

  /**
   * portfolio_timeseries without action
   */
  export type portfolio_timeseriesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the portfolio_timeseries
     */
    select?: portfolio_timeseriesSelect<ExtArgs> | null
  }


  /**
   * Model trades
   */

  export type AggregateTrades = {
    _count: TradesCountAggregateOutputType | null
    _avg: TradesAvgAggregateOutputType | null
    _sum: TradesSumAggregateOutputType | null
    _min: TradesMinAggregateOutputType | null
    _max: TradesMaxAggregateOutputType | null
  }

  export type TradesAvgAggregateOutputType = {
    id: number | null
    estimated_profit_normalized: number | null
    estimated_profit: number | null
    estimated_gross_profit: number | null
    executed_profit_normalized: number | null
    executed_profit: number | null
    executed_gross_profit: number | null
    executed_time_ms: number | null
    estimated_src_price: number | null
    estimated_dst_price: number | null
    estimated_qty: number | null
    executed_src_price: number | null
    executed_dst_price: number | null
    executed_qty_src: number | null
    executed_qty_dst: number | null
    creation_time: number | null
    open_time: number | null
    last_update_time: number | null
    tx_fee: number | null
    commission_percent: number | null
    hedge: number | null
  }

  export type TradesSumAggregateOutputType = {
    id: number | null
    estimated_profit_normalized: number | null
    estimated_profit: number | null
    estimated_gross_profit: number | null
    executed_profit_normalized: number | null
    executed_profit: number | null
    executed_gross_profit: number | null
    executed_time_ms: number | null
    estimated_src_price: number | null
    estimated_dst_price: number | null
    estimated_qty: number | null
    executed_src_price: number | null
    executed_dst_price: number | null
    executed_qty_src: number | null
    executed_qty_dst: number | null
    creation_time: number | null
    open_time: number | null
    last_update_time: number | null
    tx_fee: number | null
    commission_percent: number | null
    hedge: number | null
  }

  export type TradesMinAggregateOutputType = {
    id: number | null
    fsm_type: string | null
    pair: string | null
    src_exchange: string | null
    dst_exchange: string | null
    status: string | null
    user: string | null
    estimated_profit_normalized: number | null
    estimated_profit: number | null
    estimated_gross_profit: number | null
    executed_profit_normalized: number | null
    executed_profit: number | null
    executed_gross_profit: number | null
    executed_time_ms: number | null
    estimated_src_price: number | null
    estimated_dst_price: number | null
    estimated_qty: number | null
    executed_src_price: number | null
    executed_dst_price: number | null
    executed_qty_src: number | null
    executed_qty_dst: number | null
    props: string | null
    creation_time: number | null
    open_time: number | null
    last_update_time: number | null
    tx_fee: number | null
    commission_percent: number | null
    hedge: number | null
    raw_json: string | null
  }

  export type TradesMaxAggregateOutputType = {
    id: number | null
    fsm_type: string | null
    pair: string | null
    src_exchange: string | null
    dst_exchange: string | null
    status: string | null
    user: string | null
    estimated_profit_normalized: number | null
    estimated_profit: number | null
    estimated_gross_profit: number | null
    executed_profit_normalized: number | null
    executed_profit: number | null
    executed_gross_profit: number | null
    executed_time_ms: number | null
    estimated_src_price: number | null
    estimated_dst_price: number | null
    estimated_qty: number | null
    executed_src_price: number | null
    executed_dst_price: number | null
    executed_qty_src: number | null
    executed_qty_dst: number | null
    props: string | null
    creation_time: number | null
    open_time: number | null
    last_update_time: number | null
    tx_fee: number | null
    commission_percent: number | null
    hedge: number | null
    raw_json: string | null
  }

  export type TradesCountAggregateOutputType = {
    id: number
    fsm_type: number
    pair: number
    src_exchange: number
    dst_exchange: number
    status: number
    user: number
    estimated_profit_normalized: number
    estimated_profit: number
    estimated_gross_profit: number
    executed_profit_normalized: number
    executed_profit: number
    executed_gross_profit: number
    executed_time_ms: number
    estimated_src_price: number
    estimated_dst_price: number
    estimated_qty: number
    executed_src_price: number
    executed_dst_price: number
    executed_qty_src: number
    executed_qty_dst: number
    props: number
    creation_time: number
    open_time: number
    last_update_time: number
    tx_fee: number
    commission_percent: number
    hedge: number
    raw_json: number
    _all: number
  }


  export type TradesAvgAggregateInputType = {
    id?: true
    estimated_profit_normalized?: true
    estimated_profit?: true
    estimated_gross_profit?: true
    executed_profit_normalized?: true
    executed_profit?: true
    executed_gross_profit?: true
    executed_time_ms?: true
    estimated_src_price?: true
    estimated_dst_price?: true
    estimated_qty?: true
    executed_src_price?: true
    executed_dst_price?: true
    executed_qty_src?: true
    executed_qty_dst?: true
    creation_time?: true
    open_time?: true
    last_update_time?: true
    tx_fee?: true
    commission_percent?: true
    hedge?: true
  }

  export type TradesSumAggregateInputType = {
    id?: true
    estimated_profit_normalized?: true
    estimated_profit?: true
    estimated_gross_profit?: true
    executed_profit_normalized?: true
    executed_profit?: true
    executed_gross_profit?: true
    executed_time_ms?: true
    estimated_src_price?: true
    estimated_dst_price?: true
    estimated_qty?: true
    executed_src_price?: true
    executed_dst_price?: true
    executed_qty_src?: true
    executed_qty_dst?: true
    creation_time?: true
    open_time?: true
    last_update_time?: true
    tx_fee?: true
    commission_percent?: true
    hedge?: true
  }

  export type TradesMinAggregateInputType = {
    id?: true
    fsm_type?: true
    pair?: true
    src_exchange?: true
    dst_exchange?: true
    status?: true
    user?: true
    estimated_profit_normalized?: true
    estimated_profit?: true
    estimated_gross_profit?: true
    executed_profit_normalized?: true
    executed_profit?: true
    executed_gross_profit?: true
    executed_time_ms?: true
    estimated_src_price?: true
    estimated_dst_price?: true
    estimated_qty?: true
    executed_src_price?: true
    executed_dst_price?: true
    executed_qty_src?: true
    executed_qty_dst?: true
    props?: true
    creation_time?: true
    open_time?: true
    last_update_time?: true
    tx_fee?: true
    commission_percent?: true
    hedge?: true
    raw_json?: true
  }

  export type TradesMaxAggregateInputType = {
    id?: true
    fsm_type?: true
    pair?: true
    src_exchange?: true
    dst_exchange?: true
    status?: true
    user?: true
    estimated_profit_normalized?: true
    estimated_profit?: true
    estimated_gross_profit?: true
    executed_profit_normalized?: true
    executed_profit?: true
    executed_gross_profit?: true
    executed_time_ms?: true
    estimated_src_price?: true
    estimated_dst_price?: true
    estimated_qty?: true
    executed_src_price?: true
    executed_dst_price?: true
    executed_qty_src?: true
    executed_qty_dst?: true
    props?: true
    creation_time?: true
    open_time?: true
    last_update_time?: true
    tx_fee?: true
    commission_percent?: true
    hedge?: true
    raw_json?: true
  }

  export type TradesCountAggregateInputType = {
    id?: true
    fsm_type?: true
    pair?: true
    src_exchange?: true
    dst_exchange?: true
    status?: true
    user?: true
    estimated_profit_normalized?: true
    estimated_profit?: true
    estimated_gross_profit?: true
    executed_profit_normalized?: true
    executed_profit?: true
    executed_gross_profit?: true
    executed_time_ms?: true
    estimated_src_price?: true
    estimated_dst_price?: true
    estimated_qty?: true
    executed_src_price?: true
    executed_dst_price?: true
    executed_qty_src?: true
    executed_qty_dst?: true
    props?: true
    creation_time?: true
    open_time?: true
    last_update_time?: true
    tx_fee?: true
    commission_percent?: true
    hedge?: true
    raw_json?: true
    _all?: true
  }

  export type TradesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trades to aggregate.
     */
    where?: tradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trades to fetch.
     */
    orderBy?: tradesOrderByWithRelationInput | tradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: tradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned trades
    **/
    _count?: true | TradesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TradesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TradesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TradesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TradesMaxAggregateInputType
  }

  export type GetTradesAggregateType<T extends TradesAggregateArgs> = {
        [P in keyof T & keyof AggregateTrades]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrades[P]>
      : GetScalarType<T[P], AggregateTrades[P]>
  }




  export type tradesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: tradesWhereInput
    orderBy?: tradesOrderByWithAggregationInput | tradesOrderByWithAggregationInput[]
    by: TradesScalarFieldEnum[] | TradesScalarFieldEnum
    having?: tradesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TradesCountAggregateInputType | true
    _avg?: TradesAvgAggregateInputType
    _sum?: TradesSumAggregateInputType
    _min?: TradesMinAggregateInputType
    _max?: TradesMaxAggregateInputType
  }

  export type TradesGroupByOutputType = {
    id: number
    fsm_type: string
    pair: string
    src_exchange: string
    dst_exchange: string
    status: string
    user: string
    estimated_profit_normalized: number
    estimated_profit: number
    estimated_gross_profit: number
    executed_profit_normalized: number
    executed_profit: number
    executed_gross_profit: number
    executed_time_ms: number
    estimated_src_price: number
    estimated_dst_price: number
    estimated_qty: number
    executed_src_price: number
    executed_dst_price: number
    executed_qty_src: number
    executed_qty_dst: number
    props: string
    creation_time: number
    open_time: number
    last_update_time: number
    tx_fee: number | null
    commission_percent: number | null
    hedge: number | null
    raw_json: string
    _count: TradesCountAggregateOutputType | null
    _avg: TradesAvgAggregateOutputType | null
    _sum: TradesSumAggregateOutputType | null
    _min: TradesMinAggregateOutputType | null
    _max: TradesMaxAggregateOutputType | null
  }

  type GetTradesGroupByPayload<T extends tradesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TradesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TradesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TradesGroupByOutputType[P]>
            : GetScalarType<T[P], TradesGroupByOutputType[P]>
        }
      >
    >


  export type tradesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fsm_type?: boolean
    pair?: boolean
    src_exchange?: boolean
    dst_exchange?: boolean
    status?: boolean
    user?: boolean
    estimated_profit_normalized?: boolean
    estimated_profit?: boolean
    estimated_gross_profit?: boolean
    executed_profit_normalized?: boolean
    executed_profit?: boolean
    executed_gross_profit?: boolean
    executed_time_ms?: boolean
    estimated_src_price?: boolean
    estimated_dst_price?: boolean
    estimated_qty?: boolean
    executed_src_price?: boolean
    executed_dst_price?: boolean
    executed_qty_src?: boolean
    executed_qty_dst?: boolean
    props?: boolean
    creation_time?: boolean
    open_time?: boolean
    last_update_time?: boolean
    tx_fee?: boolean
    commission_percent?: boolean
    hedge?: boolean
    raw_json?: boolean
  }, ExtArgs["result"]["trades"]>

  export type tradesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fsm_type?: boolean
    pair?: boolean
    src_exchange?: boolean
    dst_exchange?: boolean
    status?: boolean
    user?: boolean
    estimated_profit_normalized?: boolean
    estimated_profit?: boolean
    estimated_gross_profit?: boolean
    executed_profit_normalized?: boolean
    executed_profit?: boolean
    executed_gross_profit?: boolean
    executed_time_ms?: boolean
    estimated_src_price?: boolean
    estimated_dst_price?: boolean
    estimated_qty?: boolean
    executed_src_price?: boolean
    executed_dst_price?: boolean
    executed_qty_src?: boolean
    executed_qty_dst?: boolean
    props?: boolean
    creation_time?: boolean
    open_time?: boolean
    last_update_time?: boolean
    tx_fee?: boolean
    commission_percent?: boolean
    hedge?: boolean
    raw_json?: boolean
  }, ExtArgs["result"]["trades"]>

  export type tradesSelectScalar = {
    id?: boolean
    fsm_type?: boolean
    pair?: boolean
    src_exchange?: boolean
    dst_exchange?: boolean
    status?: boolean
    user?: boolean
    estimated_profit_normalized?: boolean
    estimated_profit?: boolean
    estimated_gross_profit?: boolean
    executed_profit_normalized?: boolean
    executed_profit?: boolean
    executed_gross_profit?: boolean
    executed_time_ms?: boolean
    estimated_src_price?: boolean
    estimated_dst_price?: boolean
    estimated_qty?: boolean
    executed_src_price?: boolean
    executed_dst_price?: boolean
    executed_qty_src?: boolean
    executed_qty_dst?: boolean
    props?: boolean
    creation_time?: boolean
    open_time?: boolean
    last_update_time?: boolean
    tx_fee?: boolean
    commission_percent?: boolean
    hedge?: boolean
    raw_json?: boolean
  }


  export type $tradesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "trades"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fsm_type: string
      pair: string
      src_exchange: string
      dst_exchange: string
      status: string
      user: string
      estimated_profit_normalized: number
      estimated_profit: number
      estimated_gross_profit: number
      executed_profit_normalized: number
      executed_profit: number
      executed_gross_profit: number
      executed_time_ms: number
      estimated_src_price: number
      estimated_dst_price: number
      estimated_qty: number
      executed_src_price: number
      executed_dst_price: number
      executed_qty_src: number
      executed_qty_dst: number
      props: string
      creation_time: number
      open_time: number
      last_update_time: number
      tx_fee: number | null
      commission_percent: number | null
      hedge: number | null
      raw_json: string
    }, ExtArgs["result"]["trades"]>
    composites: {}
  }

  type tradesGetPayload<S extends boolean | null | undefined | tradesDefaultArgs> = $Result.GetResult<Prisma.$tradesPayload, S>

  type tradesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<tradesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TradesCountAggregateInputType | true
    }

  export interface tradesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['trades'], meta: { name: 'trades' } }
    /**
     * Find zero or one Trades that matches the filter.
     * @param {tradesFindUniqueArgs} args - Arguments to find a Trades
     * @example
     * // Get one Trades
     * const trades = await prisma.trades.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends tradesFindUniqueArgs>(args: SelectSubset<T, tradesFindUniqueArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Trades that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {tradesFindUniqueOrThrowArgs} args - Arguments to find a Trades
     * @example
     * // Get one Trades
     * const trades = await prisma.trades.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends tradesFindUniqueOrThrowArgs>(args: SelectSubset<T, tradesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Trades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesFindFirstArgs} args - Arguments to find a Trades
     * @example
     * // Get one Trades
     * const trades = await prisma.trades.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends tradesFindFirstArgs>(args?: SelectSubset<T, tradesFindFirstArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Trades that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesFindFirstOrThrowArgs} args - Arguments to find a Trades
     * @example
     * // Get one Trades
     * const trades = await prisma.trades.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends tradesFindFirstOrThrowArgs>(args?: SelectSubset<T, tradesFindFirstOrThrowArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Trades that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trades
     * const trades = await prisma.trades.findMany()
     * 
     * // Get first 10 Trades
     * const trades = await prisma.trades.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tradesWithIdOnly = await prisma.trades.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends tradesFindManyArgs>(args?: SelectSubset<T, tradesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Trades.
     * @param {tradesCreateArgs} args - Arguments to create a Trades.
     * @example
     * // Create one Trades
     * const Trades = await prisma.trades.create({
     *   data: {
     *     // ... data to create a Trades
     *   }
     * })
     * 
     */
    create<T extends tradesCreateArgs>(args: SelectSubset<T, tradesCreateArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Trades.
     * @param {tradesCreateManyArgs} args - Arguments to create many Trades.
     * @example
     * // Create many Trades
     * const trades = await prisma.trades.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends tradesCreateManyArgs>(args?: SelectSubset<T, tradesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trades and returns the data saved in the database.
     * @param {tradesCreateManyAndReturnArgs} args - Arguments to create many Trades.
     * @example
     * // Create many Trades
     * const trades = await prisma.trades.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trades and only return the `id`
     * const tradesWithIdOnly = await prisma.trades.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends tradesCreateManyAndReturnArgs>(args?: SelectSubset<T, tradesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Trades.
     * @param {tradesDeleteArgs} args - Arguments to delete one Trades.
     * @example
     * // Delete one Trades
     * const Trades = await prisma.trades.delete({
     *   where: {
     *     // ... filter to delete one Trades
     *   }
     * })
     * 
     */
    delete<T extends tradesDeleteArgs>(args: SelectSubset<T, tradesDeleteArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Trades.
     * @param {tradesUpdateArgs} args - Arguments to update one Trades.
     * @example
     * // Update one Trades
     * const trades = await prisma.trades.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends tradesUpdateArgs>(args: SelectSubset<T, tradesUpdateArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Trades.
     * @param {tradesDeleteManyArgs} args - Arguments to filter Trades to delete.
     * @example
     * // Delete a few Trades
     * const { count } = await prisma.trades.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends tradesDeleteManyArgs>(args?: SelectSubset<T, tradesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trades
     * const trades = await prisma.trades.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends tradesUpdateManyArgs>(args: SelectSubset<T, tradesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Trades.
     * @param {tradesUpsertArgs} args - Arguments to update or create a Trades.
     * @example
     * // Update or create a Trades
     * const trades = await prisma.trades.upsert({
     *   create: {
     *     // ... data to create a Trades
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trades we want to update
     *   }
     * })
     */
    upsert<T extends tradesUpsertArgs>(args: SelectSubset<T, tradesUpsertArgs<ExtArgs>>): Prisma__tradesClient<$Result.GetResult<Prisma.$tradesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesCountArgs} args - Arguments to filter Trades to count.
     * @example
     * // Count the number of Trades
     * const count = await prisma.trades.count({
     *   where: {
     *     // ... the filter for the Trades we want to count
     *   }
     * })
    **/
    count<T extends tradesCountArgs>(
      args?: Subset<T, tradesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TradesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TradesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TradesAggregateArgs>(args: Subset<T, TradesAggregateArgs>): Prisma.PrismaPromise<GetTradesAggregateType<T>>

    /**
     * Group by Trades.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {tradesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends tradesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: tradesGroupByArgs['orderBy'] }
        : { orderBy?: tradesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, tradesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTradesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the trades model
   */
  readonly fields: tradesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for trades.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__tradesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the trades model
   */ 
  interface tradesFieldRefs {
    readonly id: FieldRef<"trades", 'Int'>
    readonly fsm_type: FieldRef<"trades", 'String'>
    readonly pair: FieldRef<"trades", 'String'>
    readonly src_exchange: FieldRef<"trades", 'String'>
    readonly dst_exchange: FieldRef<"trades", 'String'>
    readonly status: FieldRef<"trades", 'String'>
    readonly user: FieldRef<"trades", 'String'>
    readonly estimated_profit_normalized: FieldRef<"trades", 'Float'>
    readonly estimated_profit: FieldRef<"trades", 'Float'>
    readonly estimated_gross_profit: FieldRef<"trades", 'Float'>
    readonly executed_profit_normalized: FieldRef<"trades", 'Float'>
    readonly executed_profit: FieldRef<"trades", 'Float'>
    readonly executed_gross_profit: FieldRef<"trades", 'Float'>
    readonly executed_time_ms: FieldRef<"trades", 'Int'>
    readonly estimated_src_price: FieldRef<"trades", 'Float'>
    readonly estimated_dst_price: FieldRef<"trades", 'Float'>
    readonly estimated_qty: FieldRef<"trades", 'Float'>
    readonly executed_src_price: FieldRef<"trades", 'Float'>
    readonly executed_dst_price: FieldRef<"trades", 'Float'>
    readonly executed_qty_src: FieldRef<"trades", 'Float'>
    readonly executed_qty_dst: FieldRef<"trades", 'Float'>
    readonly props: FieldRef<"trades", 'String'>
    readonly creation_time: FieldRef<"trades", 'Int'>
    readonly open_time: FieldRef<"trades", 'Int'>
    readonly last_update_time: FieldRef<"trades", 'Int'>
    readonly tx_fee: FieldRef<"trades", 'Float'>
    readonly commission_percent: FieldRef<"trades", 'Float'>
    readonly hedge: FieldRef<"trades", 'Int'>
    readonly raw_json: FieldRef<"trades", 'String'>
  }
    

  // Custom InputTypes
  /**
   * trades findUnique
   */
  export type tradesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter, which trades to fetch.
     */
    where: tradesWhereUniqueInput
  }

  /**
   * trades findUniqueOrThrow
   */
  export type tradesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter, which trades to fetch.
     */
    where: tradesWhereUniqueInput
  }

  /**
   * trades findFirst
   */
  export type tradesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter, which trades to fetch.
     */
    where?: tradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trades to fetch.
     */
    orderBy?: tradesOrderByWithRelationInput | tradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trades.
     */
    cursor?: tradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trades.
     */
    distinct?: TradesScalarFieldEnum | TradesScalarFieldEnum[]
  }

  /**
   * trades findFirstOrThrow
   */
  export type tradesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter, which trades to fetch.
     */
    where?: tradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trades to fetch.
     */
    orderBy?: tradesOrderByWithRelationInput | tradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for trades.
     */
    cursor?: tradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trades.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of trades.
     */
    distinct?: TradesScalarFieldEnum | TradesScalarFieldEnum[]
  }

  /**
   * trades findMany
   */
  export type tradesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter, which trades to fetch.
     */
    where?: tradesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of trades to fetch.
     */
    orderBy?: tradesOrderByWithRelationInput | tradesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing trades.
     */
    cursor?: tradesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` trades from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` trades.
     */
    skip?: number
    distinct?: TradesScalarFieldEnum | TradesScalarFieldEnum[]
  }

  /**
   * trades create
   */
  export type tradesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * The data needed to create a trades.
     */
    data: XOR<tradesCreateInput, tradesUncheckedCreateInput>
  }

  /**
   * trades createMany
   */
  export type tradesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many trades.
     */
    data: tradesCreateManyInput | tradesCreateManyInput[]
  }

  /**
   * trades createManyAndReturn
   */
  export type tradesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many trades.
     */
    data: tradesCreateManyInput | tradesCreateManyInput[]
  }

  /**
   * trades update
   */
  export type tradesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * The data needed to update a trades.
     */
    data: XOR<tradesUpdateInput, tradesUncheckedUpdateInput>
    /**
     * Choose, which trades to update.
     */
    where: tradesWhereUniqueInput
  }

  /**
   * trades updateMany
   */
  export type tradesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update trades.
     */
    data: XOR<tradesUpdateManyMutationInput, tradesUncheckedUpdateManyInput>
    /**
     * Filter which trades to update
     */
    where?: tradesWhereInput
  }

  /**
   * trades upsert
   */
  export type tradesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * The filter to search for the trades to update in case it exists.
     */
    where: tradesWhereUniqueInput
    /**
     * In case the trades found by the `where` argument doesn't exist, create a new trades with this data.
     */
    create: XOR<tradesCreateInput, tradesUncheckedCreateInput>
    /**
     * In case the trades was found with the provided `where` argument, update it with this data.
     */
    update: XOR<tradesUpdateInput, tradesUncheckedUpdateInput>
  }

  /**
   * trades delete
   */
  export type tradesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
    /**
     * Filter which trades to delete.
     */
    where: tradesWhereUniqueInput
  }

  /**
   * trades deleteMany
   */
  export type tradesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which trades to delete
     */
    where?: tradesWhereInput
  }

  /**
   * trades without action
   */
  export type tradesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the trades
     */
    select?: tradesSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const Balance_timeseriesScalarFieldEnum: {
    id: 'id',
    ts: 'ts',
    exchange: 'exchange',
    usdt_val: 'usdt_val',
    coin_val: 'coin_val',
    total_usd: 'total_usd',
    raw_json: 'raw_json'
  };

  export type Balance_timeseriesScalarFieldEnum = (typeof Balance_timeseriesScalarFieldEnum)[keyof typeof Balance_timeseriesScalarFieldEnum]


  export const Portfolio_timeseriesScalarFieldEnum: {
    id: 'id',
    ts: 'ts',
    total_usd: 'total_usd',
    exchanges_count: 'exchanges_count'
  };

  export type Portfolio_timeseriesScalarFieldEnum = (typeof Portfolio_timeseriesScalarFieldEnum)[keyof typeof Portfolio_timeseriesScalarFieldEnum]


  export const TradesScalarFieldEnum: {
    id: 'id',
    fsm_type: 'fsm_type',
    pair: 'pair',
    src_exchange: 'src_exchange',
    dst_exchange: 'dst_exchange',
    status: 'status',
    user: 'user',
    estimated_profit_normalized: 'estimated_profit_normalized',
    estimated_profit: 'estimated_profit',
    estimated_gross_profit: 'estimated_gross_profit',
    executed_profit_normalized: 'executed_profit_normalized',
    executed_profit: 'executed_profit',
    executed_gross_profit: 'executed_gross_profit',
    executed_time_ms: 'executed_time_ms',
    estimated_src_price: 'estimated_src_price',
    estimated_dst_price: 'estimated_dst_price',
    estimated_qty: 'estimated_qty',
    executed_src_price: 'executed_src_price',
    executed_dst_price: 'executed_dst_price',
    executed_qty_src: 'executed_qty_src',
    executed_qty_dst: 'executed_qty_dst',
    props: 'props',
    creation_time: 'creation_time',
    open_time: 'open_time',
    last_update_time: 'last_update_time',
    tx_fee: 'tx_fee',
    commission_percent: 'commission_percent',
    hedge: 'hedge',
    raw_json: 'raw_json'
  };

  export type TradesScalarFieldEnum = (typeof TradesScalarFieldEnum)[keyof typeof TradesScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type balance_timeseriesWhereInput = {
    AND?: balance_timeseriesWhereInput | balance_timeseriesWhereInput[]
    OR?: balance_timeseriesWhereInput[]
    NOT?: balance_timeseriesWhereInput | balance_timeseriesWhereInput[]
    id?: IntFilter<"balance_timeseries"> | number
    ts?: IntFilter<"balance_timeseries"> | number
    exchange?: StringFilter<"balance_timeseries"> | string
    usdt_val?: FloatFilter<"balance_timeseries"> | number
    coin_val?: FloatFilter<"balance_timeseries"> | number
    total_usd?: FloatFilter<"balance_timeseries"> | number
    raw_json?: StringFilter<"balance_timeseries"> | string
  }

  export type balance_timeseriesOrderByWithRelationInput = {
    id?: SortOrder
    ts?: SortOrder
    exchange?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
    raw_json?: SortOrder
  }

  export type balance_timeseriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: balance_timeseriesWhereInput | balance_timeseriesWhereInput[]
    OR?: balance_timeseriesWhereInput[]
    NOT?: balance_timeseriesWhereInput | balance_timeseriesWhereInput[]
    ts?: IntFilter<"balance_timeseries"> | number
    exchange?: StringFilter<"balance_timeseries"> | string
    usdt_val?: FloatFilter<"balance_timeseries"> | number
    coin_val?: FloatFilter<"balance_timeseries"> | number
    total_usd?: FloatFilter<"balance_timeseries"> | number
    raw_json?: StringFilter<"balance_timeseries"> | string
  }, "id">

  export type balance_timeseriesOrderByWithAggregationInput = {
    id?: SortOrder
    ts?: SortOrder
    exchange?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
    raw_json?: SortOrder
    _count?: balance_timeseriesCountOrderByAggregateInput
    _avg?: balance_timeseriesAvgOrderByAggregateInput
    _max?: balance_timeseriesMaxOrderByAggregateInput
    _min?: balance_timeseriesMinOrderByAggregateInput
    _sum?: balance_timeseriesSumOrderByAggregateInput
  }

  export type balance_timeseriesScalarWhereWithAggregatesInput = {
    AND?: balance_timeseriesScalarWhereWithAggregatesInput | balance_timeseriesScalarWhereWithAggregatesInput[]
    OR?: balance_timeseriesScalarWhereWithAggregatesInput[]
    NOT?: balance_timeseriesScalarWhereWithAggregatesInput | balance_timeseriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"balance_timeseries"> | number
    ts?: IntWithAggregatesFilter<"balance_timeseries"> | number
    exchange?: StringWithAggregatesFilter<"balance_timeseries"> | string
    usdt_val?: FloatWithAggregatesFilter<"balance_timeseries"> | number
    coin_val?: FloatWithAggregatesFilter<"balance_timeseries"> | number
    total_usd?: FloatWithAggregatesFilter<"balance_timeseries"> | number
    raw_json?: StringWithAggregatesFilter<"balance_timeseries"> | string
  }

  export type portfolio_timeseriesWhereInput = {
    AND?: portfolio_timeseriesWhereInput | portfolio_timeseriesWhereInput[]
    OR?: portfolio_timeseriesWhereInput[]
    NOT?: portfolio_timeseriesWhereInput | portfolio_timeseriesWhereInput[]
    id?: IntFilter<"portfolio_timeseries"> | number
    ts?: IntFilter<"portfolio_timeseries"> | number
    total_usd?: FloatFilter<"portfolio_timeseries"> | number
    exchanges_count?: IntFilter<"portfolio_timeseries"> | number
  }

  export type portfolio_timeseriesOrderByWithRelationInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type portfolio_timeseriesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: portfolio_timeseriesWhereInput | portfolio_timeseriesWhereInput[]
    OR?: portfolio_timeseriesWhereInput[]
    NOT?: portfolio_timeseriesWhereInput | portfolio_timeseriesWhereInput[]
    ts?: IntFilter<"portfolio_timeseries"> | number
    total_usd?: FloatFilter<"portfolio_timeseries"> | number
    exchanges_count?: IntFilter<"portfolio_timeseries"> | number
  }, "id">

  export type portfolio_timeseriesOrderByWithAggregationInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
    _count?: portfolio_timeseriesCountOrderByAggregateInput
    _avg?: portfolio_timeseriesAvgOrderByAggregateInput
    _max?: portfolio_timeseriesMaxOrderByAggregateInput
    _min?: portfolio_timeseriesMinOrderByAggregateInput
    _sum?: portfolio_timeseriesSumOrderByAggregateInput
  }

  export type portfolio_timeseriesScalarWhereWithAggregatesInput = {
    AND?: portfolio_timeseriesScalarWhereWithAggregatesInput | portfolio_timeseriesScalarWhereWithAggregatesInput[]
    OR?: portfolio_timeseriesScalarWhereWithAggregatesInput[]
    NOT?: portfolio_timeseriesScalarWhereWithAggregatesInput | portfolio_timeseriesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"portfolio_timeseries"> | number
    ts?: IntWithAggregatesFilter<"portfolio_timeseries"> | number
    total_usd?: FloatWithAggregatesFilter<"portfolio_timeseries"> | number
    exchanges_count?: IntWithAggregatesFilter<"portfolio_timeseries"> | number
  }

  export type tradesWhereInput = {
    AND?: tradesWhereInput | tradesWhereInput[]
    OR?: tradesWhereInput[]
    NOT?: tradesWhereInput | tradesWhereInput[]
    id?: IntFilter<"trades"> | number
    fsm_type?: StringFilter<"trades"> | string
    pair?: StringFilter<"trades"> | string
    src_exchange?: StringFilter<"trades"> | string
    dst_exchange?: StringFilter<"trades"> | string
    status?: StringFilter<"trades"> | string
    user?: StringFilter<"trades"> | string
    estimated_profit_normalized?: FloatFilter<"trades"> | number
    estimated_profit?: FloatFilter<"trades"> | number
    estimated_gross_profit?: FloatFilter<"trades"> | number
    executed_profit_normalized?: FloatFilter<"trades"> | number
    executed_profit?: FloatFilter<"trades"> | number
    executed_gross_profit?: FloatFilter<"trades"> | number
    executed_time_ms?: IntFilter<"trades"> | number
    estimated_src_price?: FloatFilter<"trades"> | number
    estimated_dst_price?: FloatFilter<"trades"> | number
    estimated_qty?: FloatFilter<"trades"> | number
    executed_src_price?: FloatFilter<"trades"> | number
    executed_dst_price?: FloatFilter<"trades"> | number
    executed_qty_src?: FloatFilter<"trades"> | number
    executed_qty_dst?: FloatFilter<"trades"> | number
    props?: StringFilter<"trades"> | string
    creation_time?: IntFilter<"trades"> | number
    open_time?: IntFilter<"trades"> | number
    last_update_time?: IntFilter<"trades"> | number
    tx_fee?: FloatNullableFilter<"trades"> | number | null
    commission_percent?: FloatNullableFilter<"trades"> | number | null
    hedge?: IntNullableFilter<"trades"> | number | null
    raw_json?: StringFilter<"trades"> | string
  }

  export type tradesOrderByWithRelationInput = {
    id?: SortOrder
    fsm_type?: SortOrder
    pair?: SortOrder
    src_exchange?: SortOrder
    dst_exchange?: SortOrder
    status?: SortOrder
    user?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    props?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrderInput | SortOrder
    commission_percent?: SortOrderInput | SortOrder
    hedge?: SortOrderInput | SortOrder
    raw_json?: SortOrder
  }

  export type tradesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: tradesWhereInput | tradesWhereInput[]
    OR?: tradesWhereInput[]
    NOT?: tradesWhereInput | tradesWhereInput[]
    fsm_type?: StringFilter<"trades"> | string
    pair?: StringFilter<"trades"> | string
    src_exchange?: StringFilter<"trades"> | string
    dst_exchange?: StringFilter<"trades"> | string
    status?: StringFilter<"trades"> | string
    user?: StringFilter<"trades"> | string
    estimated_profit_normalized?: FloatFilter<"trades"> | number
    estimated_profit?: FloatFilter<"trades"> | number
    estimated_gross_profit?: FloatFilter<"trades"> | number
    executed_profit_normalized?: FloatFilter<"trades"> | number
    executed_profit?: FloatFilter<"trades"> | number
    executed_gross_profit?: FloatFilter<"trades"> | number
    executed_time_ms?: IntFilter<"trades"> | number
    estimated_src_price?: FloatFilter<"trades"> | number
    estimated_dst_price?: FloatFilter<"trades"> | number
    estimated_qty?: FloatFilter<"trades"> | number
    executed_src_price?: FloatFilter<"trades"> | number
    executed_dst_price?: FloatFilter<"trades"> | number
    executed_qty_src?: FloatFilter<"trades"> | number
    executed_qty_dst?: FloatFilter<"trades"> | number
    props?: StringFilter<"trades"> | string
    creation_time?: IntFilter<"trades"> | number
    open_time?: IntFilter<"trades"> | number
    last_update_time?: IntFilter<"trades"> | number
    tx_fee?: FloatNullableFilter<"trades"> | number | null
    commission_percent?: FloatNullableFilter<"trades"> | number | null
    hedge?: IntNullableFilter<"trades"> | number | null
    raw_json?: StringFilter<"trades"> | string
  }, "id">

  export type tradesOrderByWithAggregationInput = {
    id?: SortOrder
    fsm_type?: SortOrder
    pair?: SortOrder
    src_exchange?: SortOrder
    dst_exchange?: SortOrder
    status?: SortOrder
    user?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    props?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrderInput | SortOrder
    commission_percent?: SortOrderInput | SortOrder
    hedge?: SortOrderInput | SortOrder
    raw_json?: SortOrder
    _count?: tradesCountOrderByAggregateInput
    _avg?: tradesAvgOrderByAggregateInput
    _max?: tradesMaxOrderByAggregateInput
    _min?: tradesMinOrderByAggregateInput
    _sum?: tradesSumOrderByAggregateInput
  }

  export type tradesScalarWhereWithAggregatesInput = {
    AND?: tradesScalarWhereWithAggregatesInput | tradesScalarWhereWithAggregatesInput[]
    OR?: tradesScalarWhereWithAggregatesInput[]
    NOT?: tradesScalarWhereWithAggregatesInput | tradesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"trades"> | number
    fsm_type?: StringWithAggregatesFilter<"trades"> | string
    pair?: StringWithAggregatesFilter<"trades"> | string
    src_exchange?: StringWithAggregatesFilter<"trades"> | string
    dst_exchange?: StringWithAggregatesFilter<"trades"> | string
    status?: StringWithAggregatesFilter<"trades"> | string
    user?: StringWithAggregatesFilter<"trades"> | string
    estimated_profit_normalized?: FloatWithAggregatesFilter<"trades"> | number
    estimated_profit?: FloatWithAggregatesFilter<"trades"> | number
    estimated_gross_profit?: FloatWithAggregatesFilter<"trades"> | number
    executed_profit_normalized?: FloatWithAggregatesFilter<"trades"> | number
    executed_profit?: FloatWithAggregatesFilter<"trades"> | number
    executed_gross_profit?: FloatWithAggregatesFilter<"trades"> | number
    executed_time_ms?: IntWithAggregatesFilter<"trades"> | number
    estimated_src_price?: FloatWithAggregatesFilter<"trades"> | number
    estimated_dst_price?: FloatWithAggregatesFilter<"trades"> | number
    estimated_qty?: FloatWithAggregatesFilter<"trades"> | number
    executed_src_price?: FloatWithAggregatesFilter<"trades"> | number
    executed_dst_price?: FloatWithAggregatesFilter<"trades"> | number
    executed_qty_src?: FloatWithAggregatesFilter<"trades"> | number
    executed_qty_dst?: FloatWithAggregatesFilter<"trades"> | number
    props?: StringWithAggregatesFilter<"trades"> | string
    creation_time?: IntWithAggregatesFilter<"trades"> | number
    open_time?: IntWithAggregatesFilter<"trades"> | number
    last_update_time?: IntWithAggregatesFilter<"trades"> | number
    tx_fee?: FloatNullableWithAggregatesFilter<"trades"> | number | null
    commission_percent?: FloatNullableWithAggregatesFilter<"trades"> | number | null
    hedge?: IntNullableWithAggregatesFilter<"trades"> | number | null
    raw_json?: StringWithAggregatesFilter<"trades"> | string
  }

  export type balance_timeseriesCreateInput = {
    ts: number
    exchange: string
    usdt_val: number
    coin_val: number
    total_usd: number
    raw_json: string
  }

  export type balance_timeseriesUncheckedCreateInput = {
    id?: number
    ts: number
    exchange: string
    usdt_val: number
    coin_val: number
    total_usd: number
    raw_json: string
  }

  export type balance_timeseriesUpdateInput = {
    ts?: IntFieldUpdateOperationsInput | number
    exchange?: StringFieldUpdateOperationsInput | string
    usdt_val?: FloatFieldUpdateOperationsInput | number
    coin_val?: FloatFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type balance_timeseriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ts?: IntFieldUpdateOperationsInput | number
    exchange?: StringFieldUpdateOperationsInput | string
    usdt_val?: FloatFieldUpdateOperationsInput | number
    coin_val?: FloatFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type balance_timeseriesCreateManyInput = {
    id?: number
    ts: number
    exchange: string
    usdt_val: number
    coin_val: number
    total_usd: number
    raw_json: string
  }

  export type balance_timeseriesUpdateManyMutationInput = {
    ts?: IntFieldUpdateOperationsInput | number
    exchange?: StringFieldUpdateOperationsInput | string
    usdt_val?: FloatFieldUpdateOperationsInput | number
    coin_val?: FloatFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type balance_timeseriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ts?: IntFieldUpdateOperationsInput | number
    exchange?: StringFieldUpdateOperationsInput | string
    usdt_val?: FloatFieldUpdateOperationsInput | number
    coin_val?: FloatFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type portfolio_timeseriesCreateInput = {
    ts: number
    total_usd: number
    exchanges_count: number
  }

  export type portfolio_timeseriesUncheckedCreateInput = {
    id?: number
    ts: number
    total_usd: number
    exchanges_count: number
  }

  export type portfolio_timeseriesUpdateInput = {
    ts?: IntFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    exchanges_count?: IntFieldUpdateOperationsInput | number
  }

  export type portfolio_timeseriesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ts?: IntFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    exchanges_count?: IntFieldUpdateOperationsInput | number
  }

  export type portfolio_timeseriesCreateManyInput = {
    id?: number
    ts: number
    total_usd: number
    exchanges_count: number
  }

  export type portfolio_timeseriesUpdateManyMutationInput = {
    ts?: IntFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    exchanges_count?: IntFieldUpdateOperationsInput | number
  }

  export type portfolio_timeseriesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ts?: IntFieldUpdateOperationsInput | number
    total_usd?: FloatFieldUpdateOperationsInput | number
    exchanges_count?: IntFieldUpdateOperationsInput | number
  }

  export type tradesCreateInput = {
    id: number
    fsm_type: string
    pair: string
    src_exchange: string
    dst_exchange: string
    status: string
    user: string
    estimated_profit_normalized: number
    estimated_profit: number
    estimated_gross_profit: number
    executed_profit_normalized: number
    executed_profit: number
    executed_gross_profit: number
    executed_time_ms: number
    estimated_src_price: number
    estimated_dst_price: number
    estimated_qty: number
    executed_src_price: number
    executed_dst_price: number
    executed_qty_src: number
    executed_qty_dst: number
    props: string
    creation_time: number
    open_time: number
    last_update_time: number
    tx_fee?: number | null
    commission_percent?: number | null
    hedge?: number | null
    raw_json: string
  }

  export type tradesUncheckedCreateInput = {
    id: number
    fsm_type: string
    pair: string
    src_exchange: string
    dst_exchange: string
    status: string
    user: string
    estimated_profit_normalized: number
    estimated_profit: number
    estimated_gross_profit: number
    executed_profit_normalized: number
    executed_profit: number
    executed_gross_profit: number
    executed_time_ms: number
    estimated_src_price: number
    estimated_dst_price: number
    estimated_qty: number
    executed_src_price: number
    executed_dst_price: number
    executed_qty_src: number
    executed_qty_dst: number
    props: string
    creation_time: number
    open_time: number
    last_update_time: number
    tx_fee?: number | null
    commission_percent?: number | null
    hedge?: number | null
    raw_json: string
  }

  export type tradesUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fsm_type?: StringFieldUpdateOperationsInput | string
    pair?: StringFieldUpdateOperationsInput | string
    src_exchange?: StringFieldUpdateOperationsInput | string
    dst_exchange?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    estimated_profit_normalized?: FloatFieldUpdateOperationsInput | number
    estimated_profit?: FloatFieldUpdateOperationsInput | number
    estimated_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_profit_normalized?: FloatFieldUpdateOperationsInput | number
    executed_profit?: FloatFieldUpdateOperationsInput | number
    executed_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_time_ms?: IntFieldUpdateOperationsInput | number
    estimated_src_price?: FloatFieldUpdateOperationsInput | number
    estimated_dst_price?: FloatFieldUpdateOperationsInput | number
    estimated_qty?: FloatFieldUpdateOperationsInput | number
    executed_src_price?: FloatFieldUpdateOperationsInput | number
    executed_dst_price?: FloatFieldUpdateOperationsInput | number
    executed_qty_src?: FloatFieldUpdateOperationsInput | number
    executed_qty_dst?: FloatFieldUpdateOperationsInput | number
    props?: StringFieldUpdateOperationsInput | string
    creation_time?: IntFieldUpdateOperationsInput | number
    open_time?: IntFieldUpdateOperationsInput | number
    last_update_time?: IntFieldUpdateOperationsInput | number
    tx_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    commission_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    hedge?: NullableIntFieldUpdateOperationsInput | number | null
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type tradesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fsm_type?: StringFieldUpdateOperationsInput | string
    pair?: StringFieldUpdateOperationsInput | string
    src_exchange?: StringFieldUpdateOperationsInput | string
    dst_exchange?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    estimated_profit_normalized?: FloatFieldUpdateOperationsInput | number
    estimated_profit?: FloatFieldUpdateOperationsInput | number
    estimated_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_profit_normalized?: FloatFieldUpdateOperationsInput | number
    executed_profit?: FloatFieldUpdateOperationsInput | number
    executed_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_time_ms?: IntFieldUpdateOperationsInput | number
    estimated_src_price?: FloatFieldUpdateOperationsInput | number
    estimated_dst_price?: FloatFieldUpdateOperationsInput | number
    estimated_qty?: FloatFieldUpdateOperationsInput | number
    executed_src_price?: FloatFieldUpdateOperationsInput | number
    executed_dst_price?: FloatFieldUpdateOperationsInput | number
    executed_qty_src?: FloatFieldUpdateOperationsInput | number
    executed_qty_dst?: FloatFieldUpdateOperationsInput | number
    props?: StringFieldUpdateOperationsInput | string
    creation_time?: IntFieldUpdateOperationsInput | number
    open_time?: IntFieldUpdateOperationsInput | number
    last_update_time?: IntFieldUpdateOperationsInput | number
    tx_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    commission_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    hedge?: NullableIntFieldUpdateOperationsInput | number | null
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type tradesCreateManyInput = {
    id: number
    fsm_type: string
    pair: string
    src_exchange: string
    dst_exchange: string
    status: string
    user: string
    estimated_profit_normalized: number
    estimated_profit: number
    estimated_gross_profit: number
    executed_profit_normalized: number
    executed_profit: number
    executed_gross_profit: number
    executed_time_ms: number
    estimated_src_price: number
    estimated_dst_price: number
    estimated_qty: number
    executed_src_price: number
    executed_dst_price: number
    executed_qty_src: number
    executed_qty_dst: number
    props: string
    creation_time: number
    open_time: number
    last_update_time: number
    tx_fee?: number | null
    commission_percent?: number | null
    hedge?: number | null
    raw_json: string
  }

  export type tradesUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    fsm_type?: StringFieldUpdateOperationsInput | string
    pair?: StringFieldUpdateOperationsInput | string
    src_exchange?: StringFieldUpdateOperationsInput | string
    dst_exchange?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    estimated_profit_normalized?: FloatFieldUpdateOperationsInput | number
    estimated_profit?: FloatFieldUpdateOperationsInput | number
    estimated_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_profit_normalized?: FloatFieldUpdateOperationsInput | number
    executed_profit?: FloatFieldUpdateOperationsInput | number
    executed_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_time_ms?: IntFieldUpdateOperationsInput | number
    estimated_src_price?: FloatFieldUpdateOperationsInput | number
    estimated_dst_price?: FloatFieldUpdateOperationsInput | number
    estimated_qty?: FloatFieldUpdateOperationsInput | number
    executed_src_price?: FloatFieldUpdateOperationsInput | number
    executed_dst_price?: FloatFieldUpdateOperationsInput | number
    executed_qty_src?: FloatFieldUpdateOperationsInput | number
    executed_qty_dst?: FloatFieldUpdateOperationsInput | number
    props?: StringFieldUpdateOperationsInput | string
    creation_time?: IntFieldUpdateOperationsInput | number
    open_time?: IntFieldUpdateOperationsInput | number
    last_update_time?: IntFieldUpdateOperationsInput | number
    tx_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    commission_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    hedge?: NullableIntFieldUpdateOperationsInput | number | null
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type tradesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fsm_type?: StringFieldUpdateOperationsInput | string
    pair?: StringFieldUpdateOperationsInput | string
    src_exchange?: StringFieldUpdateOperationsInput | string
    dst_exchange?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    user?: StringFieldUpdateOperationsInput | string
    estimated_profit_normalized?: FloatFieldUpdateOperationsInput | number
    estimated_profit?: FloatFieldUpdateOperationsInput | number
    estimated_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_profit_normalized?: FloatFieldUpdateOperationsInput | number
    executed_profit?: FloatFieldUpdateOperationsInput | number
    executed_gross_profit?: FloatFieldUpdateOperationsInput | number
    executed_time_ms?: IntFieldUpdateOperationsInput | number
    estimated_src_price?: FloatFieldUpdateOperationsInput | number
    estimated_dst_price?: FloatFieldUpdateOperationsInput | number
    estimated_qty?: FloatFieldUpdateOperationsInput | number
    executed_src_price?: FloatFieldUpdateOperationsInput | number
    executed_dst_price?: FloatFieldUpdateOperationsInput | number
    executed_qty_src?: FloatFieldUpdateOperationsInput | number
    executed_qty_dst?: FloatFieldUpdateOperationsInput | number
    props?: StringFieldUpdateOperationsInput | string
    creation_time?: IntFieldUpdateOperationsInput | number
    open_time?: IntFieldUpdateOperationsInput | number
    last_update_time?: IntFieldUpdateOperationsInput | number
    tx_fee?: NullableFloatFieldUpdateOperationsInput | number | null
    commission_percent?: NullableFloatFieldUpdateOperationsInput | number | null
    hedge?: NullableIntFieldUpdateOperationsInput | number | null
    raw_json?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type balance_timeseriesCountOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    exchange?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
    raw_json?: SortOrder
  }

  export type balance_timeseriesAvgOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
  }

  export type balance_timeseriesMaxOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    exchange?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
    raw_json?: SortOrder
  }

  export type balance_timeseriesMinOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    exchange?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
    raw_json?: SortOrder
  }

  export type balance_timeseriesSumOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    usdt_val?: SortOrder
    coin_val?: SortOrder
    total_usd?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type portfolio_timeseriesCountOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type portfolio_timeseriesAvgOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type portfolio_timeseriesMaxOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type portfolio_timeseriesMinOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type portfolio_timeseriesSumOrderByAggregateInput = {
    id?: SortOrder
    ts?: SortOrder
    total_usd?: SortOrder
    exchanges_count?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type tradesCountOrderByAggregateInput = {
    id?: SortOrder
    fsm_type?: SortOrder
    pair?: SortOrder
    src_exchange?: SortOrder
    dst_exchange?: SortOrder
    status?: SortOrder
    user?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    props?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrder
    commission_percent?: SortOrder
    hedge?: SortOrder
    raw_json?: SortOrder
  }

  export type tradesAvgOrderByAggregateInput = {
    id?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrder
    commission_percent?: SortOrder
    hedge?: SortOrder
  }

  export type tradesMaxOrderByAggregateInput = {
    id?: SortOrder
    fsm_type?: SortOrder
    pair?: SortOrder
    src_exchange?: SortOrder
    dst_exchange?: SortOrder
    status?: SortOrder
    user?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    props?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrder
    commission_percent?: SortOrder
    hedge?: SortOrder
    raw_json?: SortOrder
  }

  export type tradesMinOrderByAggregateInput = {
    id?: SortOrder
    fsm_type?: SortOrder
    pair?: SortOrder
    src_exchange?: SortOrder
    dst_exchange?: SortOrder
    status?: SortOrder
    user?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    props?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrder
    commission_percent?: SortOrder
    hedge?: SortOrder
    raw_json?: SortOrder
  }

  export type tradesSumOrderByAggregateInput = {
    id?: SortOrder
    estimated_profit_normalized?: SortOrder
    estimated_profit?: SortOrder
    estimated_gross_profit?: SortOrder
    executed_profit_normalized?: SortOrder
    executed_profit?: SortOrder
    executed_gross_profit?: SortOrder
    executed_time_ms?: SortOrder
    estimated_src_price?: SortOrder
    estimated_dst_price?: SortOrder
    estimated_qty?: SortOrder
    executed_src_price?: SortOrder
    executed_dst_price?: SortOrder
    executed_qty_src?: SortOrder
    executed_qty_dst?: SortOrder
    creation_time?: SortOrder
    open_time?: SortOrder
    last_update_time?: SortOrder
    tx_fee?: SortOrder
    commission_percent?: SortOrder
    hedge?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use balance_timeseriesDefaultArgs instead
     */
    export type balance_timeseriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = balance_timeseriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use portfolio_timeseriesDefaultArgs instead
     */
    export type portfolio_timeseriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = portfolio_timeseriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use tradesDefaultArgs instead
     */
    export type tradesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = tradesDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}